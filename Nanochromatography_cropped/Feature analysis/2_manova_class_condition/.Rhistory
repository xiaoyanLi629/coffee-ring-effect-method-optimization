library(Seurat)
library(Seurat)
library(Seurat)
installed.packages()
max.print = 100000
source("~/Google Drive/scRNAseq/Seurat.R")
library("Seurat")
install.packages("Seurat", repos = c("https://seurat.nygenome.org/", "https://cloud.r-project.org"))
library("Seurat")
data = c('a', 'b', 'c')
data.frame()
data
data.mat = c('1', '2', '3')
data.mat
data
attributes(data)
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2, min.pct = 0.25)
# import the data directly from s3 bucket
data <- read.csv('https://articledatas3.s3.eu-central-1.amazonaws.com/CanonicalCorrelationAnalysisData.csv')
# Print the data
head(data)
X = data[,c('PsychTest1', 'PsychTest2', 'YrsEdu', 'IQ', 'HrsTrn', 'HrsWrk')]
Y = data[,c('ClientSat', 'SuperSat', 'ProjCompl')]
# Fit Canonical Correlation Analysis using built-in cancor function
model <- cancor(X,Y)
# Show the model results
print(model)
barplot(model$cor, xlab = "Dimension", ylab = "Canonical correlations", ylim = c(0,1))
# Use the CCA package for more advanced visualisation
install.packages('CCA')
library(CCA)
model2 <- cc(X, Y)
plt.cc(model2, var.label = TRUE)
library(CCA)
print('Hello world')
version
version
install.packages('Seurat')
library(Seurat)
## Data setup
The gene count matrices used for this tutorial are hosted [here](https://github.com/quon-titative-biology/examples/blob/master/scAlign_paired_alignment/kowalcyzk_gene_counts.rda).
```R
library(scAlign)
library(Seurat)
library(SingleCellExperiment)
library(gridExtra)
library(cowplot)
install.packages('scAlign')
install.packages('devtools')
devtools::install_github(repo = 'quon-titative-biology/scAlign')
```R
library(scAlign)
library(Seurat)
library(SingleCellExperiment)
library(gridExtra)
library(cowplot)
## User paths
working.dir = "." #where our data file, kowalcyzk_gene_counts.rda is located
results.dir = "." #where the output should be stored
## Load in data
load(url('https://github.com/quon-titative-biology/examples/raw/master/scAlign_paired_alignment/kowalcyzk_gene_counts.rda'))
View(C57BL6_mouse_data)
## Extract age and cell type labels
cell_age = unlist(lapply(strsplit(colnames(C57BL6_mouse_data), "_"), "[[", 1))
cell_type = gsub('HSC', '', unlist(lapply(strsplit(colnames(C57BL6_mouse_data), "_"), "[[", 2)))
cell_age
View(C57BL6_mouse_data)
dim(C57BL6_mouse_data)
lapply(strsplit(colnames(C57BL6_mouse_data), "_"), "[[", 1)
strsplit(colnames(C57BL6_mouse_data), "_")
a = strsplit(colnames(C57BL6_mouse_data), "_")
a
a[1]
lapply(a[1], "[[", 1)
lapply(a[1], "[[", 2)
lapply(a[1], "[[", 3)
lapply(a[1], 3)
b = lapply(a[1], "[[", 3)
b
unlist(b)
c = unlist(b)
c
class(c)
class(b)
## Extract age and cell type labels
cell_age = unlist(lapply(strsplit(colnames(C57BL6_mouse_data), "_"), "[[", 1))
cell_type = gsub('HSC', '', unlist(lapply(strsplit(colnames(C57BL6_mouse_data), "_"), "[[", 2)))
## Separate young and old data
young_data = C57BL6_mouse_data[unique(row.names(C57BL6_mouse_data)),which(cell_age == "young")]
old_data   = C57BL6_mouse_data[unique(row.names(C57BL6_mouse_data)),which(cell_age == "old")]
View(young_data)
dim(young_data)
y_data = C57BL6_mouse_data[row.names(C57BL6_mouse_data), which(cell_age == "young")]
dim(y_data)
## Set up young mouse Seurat object
youngMouseSeuratObj <- CreateSeuratObject(counts = young_data, project = "MOUSE_AGE", min.cells = 0)
youngMouseSeuratObj <- NormalizeData(youngMouseSeuratObj)
youngMouseSeuratObj <- ScaleData(youngMouseSeuratObj, do.scale=T, do.center=T, display.progress = T)
## Set up old mouse Seurat object
oldMouseSeuratObj <- CreateSeuratObject(counts = old_data, project = "MOUSE_AGE", min.cells = 0)
oldMouseSeuratObj <- NormalizeData(oldMouseSeuratObj)
oldMouseSeuratObj <- ScaleData(oldMouseSeuratObj, do.scale=T, do.center=T, display.progress = T)
## Gene selection
youngMouseSeuratObj <- FindVariableFeatures(youngMouseSeuratObj, do.plot = F, nFeature=3000)
oldMouseSeuratObj <- FindVariableFeatures(oldMouseSeuratObj, do.plot = F, nFeature=3000,)
genes.use = Reduce(intersect, list(VariableFeatures(youngMouseSeuratObj),
VariableFeatures(oldMouseSeuratObj),
rownames(youngMouseSeuratObj),
rownames(oldMouseSeuratObj)))
```
VariableFeatures(youngMouseSeuratObj)
rownames(youngMouseSeuratObj)
a = list(VariableFeatures(youngMouseSeuratObj))
dim(a)
View(a)
View(a)
a[[1]]
unlist(a)
a
dim(a)
View(a)
genes.use = Reduce(intersect, list(VariableFeatures(youngMouseSeuratObj),
VariableFeatures(oldMouseSeuratObj),
rownames(youngMouseSeuratObj),
rownames(oldMouseSeuratObj)))
list(VariableFeatures(youngMouseSeuratObj),
VariableFeatures(oldMouseSeuratObj))
a <- list(VariableFeatures(youngMouseSeuratObj),
VariableFeatures(oldMouseSeuratObj))
a <- list(VariableFeatures(youngMouseSeuratObj))
a <- rownames(youngMouseSeuratObj)
dim(a)
list(a)
a <- list(a)
View(a)
a[1]
a[1][1]
a[1, 1]
a[1][1]
a[1][1][1]
## Gene selection
youngMouseSeuratObj <- FindVariableFeatures(youngMouseSeuratObj, do.plot = F, nFeature=3000)
oldMouseSeuratObj <- FindVariableFeatures(oldMouseSeuratObj, do.plot = F, nFeature=3000,)
genes.use = Reduce(intersect, list(VariableFeatures(youngMouseSeuratObj),
VariableFeatures(oldMouseSeuratObj),
rownames(youngMouseSeuratObj),
rownames(oldMouseSeuratObj)))
```
young_variables <- VariableFeatures(youngMouseSeuratObj)
a <- list(VariableFeatures(youngMouseSeuratObj),
VariableFeatures(oldMouseSeuratObj),
rownames(youngMouseSeuratObj),
rownames(oldMouseSeuratObj))
hsc.combined <- merge(youngMouseSeuratObj, oldMouseSeuratObj, add.cell.ids = c("YOUNG", "OLD"), project = "HSC")
hsc.combined <- ScaleData(hsc.combined, do.scale=T, do.center=T, display.progress = T)
VariableFeatures(hsc.combined) = genes.use
## Run PCA and TSNE
hsc.combined = RunPCA(hsc.combined, do.print=FALSE)
hsc.combined = RunTSNE(hsc.combined, dims.use = 1:30, max_iter=2000)
## Plot tsne results
plot.me <- data.frame(x=hsc.combined@reductions$tsne@cell.embeddings[,1],
y=hsc.combined@reductions$tsne@cell.embeddings[,2],
labels=Idents(hsc.combined),
stringsAsFactors=FALSE)
unaligned.plot <- ggplot(plot.me, aes(x=x, y=y, colour = labels)) +
geom_point(size=2) +
scale_colour_manual(values=c("blue", "red")) +
xlab('t-SNE 1') +
ylab('t-SNE 2') +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA),
axis.line = element_line(colour = 'black',size=1))
plot(unaligned.plot)
```
![Unaligned](https://github.com/quon-titative-biology/examples/blob/master/scAlign_paired_alignment/figures/unaligned_plot.png)
## Run PCA and TSNE
hsc.combined <- RunPCA(hsc.combined, do.print=FALSE)
hsc.combined <- RunTSNE(hsc.combined, dims.use = 1:30, max_iter=2000)
```R
## Combine our Seurat objects
hsc.combined <- merge(youngMouseSeuratObj, oldMouseSeuratObj, add.cell.ids = c("YOUNG", "OLD"), project = "HSC")
hsc.combined <- ScaleData(hsc.combined, do.scale=T, do.center=T, display.progress = T)
VariableFeatures(hsc.combined) = genes.use
## Run PCA and TSNE
hsc.combined <- RunPCA(hsc.combined, do.print=FALSE)
hsc.combined <- RunTSNE(hsc.combined, dims.use = 1:30, max_iter=2000)
## Plot tsne results
plot.me <- data.frame(x=hsc.combined@reductions$tsne@cell.embeddings[,1],
y=hsc.combined@reductions$tsne@cell.embeddings[,2],
labels=Idents(hsc.combined),
stringsAsFactors=FALSE)
unaligned.plot <- ggplot(plot.me, aes(x=x, y=y, colour = labels)) +
geom_point(size=2) +
scale_colour_manual(values=c("blue", "red")) +
xlab('t-SNE 1') +
ylab('t-SNE 2') +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA),
axis.line = element_line(colour = 'black',size=1))
plot(unaligned.plot)
```
![Unaligned](https://github.com/quon-titative-biology/examples/blob/master/scAlign_paired_alignment/figures/unaligned_plot.png)
```R
## Create paired dataset SCE objects to pass into scAlignCreateObject
youngMouseSCE <- SingleCellExperiment(
assays = list(counts = youngMouseSeuratObj@assays$RNA@counts[genes.use,],
logcounts  = youngMouseSeuratObj@assays$RNA@data[genes.use,],
scale.data = youngMouseSeuratObj@assays$RNA@scale.data[genes.use,])
)
oldMouseSCE <- SingleCellExperiment(
assays = list(counts = oldMouseSeuratObj@assays$RNA@counts[genes.use,],
logcounts  = oldMouseSeuratObj@assays$RNA@data[genes.use,],
scale.data = oldMouseSeuratObj@assays$RNA@scale.data[genes.use,])
)
```
We now build the scAlign SCE object and compute PCs and/or CCs using Seurat for the assay defined by `data.use`. It is assumed that `data.use`, which is being used for the initial step of dimensionality reduction, is properly normalized and scaled.
Resulting combined matrices will always be ordered based on the sce.objects list order.
oldMouseSCE <- SingleCellExperiment(
assays = list(counts = oldMouseSeuratObj@assays$RNA@counts[genes.use,],
logcounts  = oldMouseSeuratObj@assays$RNA@data[genes.use,],
scale.data = oldMouseSeuratObj@assays$RNA@scale.data[genes.use,])
)
View(youngMouseSCE)
youngMouseSCE$colData
youngMouseSCE@colData
a <- youngMouseSCE@colData
View(a)
dim(a)
a[1]
class(a)
a <- list("YOUNG"=youngMouseSCE, "OLD"=oldMouseSCE)
View(a)
a[1]
a[2]
b = a[1]
b
cell_age
class(cell_age)
cell_age[1]
cell_age[2]
dim(cell_age)
cell_age[5000]
cell_age[50]
cell_age[500]
```R
## Run scAlign with high_var_genes as input to the encoder (alignment) and logcounts with the decoder (projections).
scAlignHSC = scAlign(scAlignHSC,
options=scAlignOptions(steps=5000, log.every=5000, norm=TRUE, batch.norm.layer=TRUE, early.stop=FALSE, architecture="small"),
encoder.data="scale.data",
decoder.data="logcounts",
supervised='none',
run.encoder=TRUE,
run.decoder=TRUE,
log.dir=file.path(results.dir, 'models','gene_input'),
device="CPU")
## Additional run of scAlign with PCA, the early.stopping heuristic terminates the training procedure too early with PCs as input so it is disabled.
scAlignHSC = scAlign(scAlignHSC,
options=scAlignOptions(steps=15000, log.every=1000, norm=TRUE, batch.norm.layer=TRUE, early.stop=FALSE),
encoder.data="PCA",
supervised='none',
run.encoder=TRUE,
run.decoder=FALSE,
log.dir=file.path(results.dir, 'models','pca_input'),
device="CPU")
scAlignHSC = scAlign(scAlignHSC,
options=scAlignOptions(steps=5000, log.every=5000, norm=TRUE, batch.norm.layer=TRUE, early.stop=FALSE, architecture="small"),
encoder.data="scale.data",
decoder.data="logcounts",
supervised='none',
run.encoder=TRUE,
run.decoder=TRUE,
log.dir=file.path(results.dir, 'models','gene_input'),
device="CPU")
install.packages('tensorflow')
install.packages("tensorflow")
scAlignHSC = scAlign(scAlignHSC,
options=scAlignOptions(steps=5000, log.every=5000, norm=TRUE, batch.norm.layer=TRUE, early.stop=FALSE, architecture="small"),
encoder.data="scale.data",
decoder.data="logcounts",
supervised='none',
run.encoder=TRUE,
run.decoder=TRUE,
log.dir=file.path(results.dir, 'models','gene_input'),
device="CPU")
library(scAlign)
library(Seurat)
library(SingleCellExperiment)
library(gridExtra)
library(cowplot)
scAlignHSC = scAlign(scAlignHSC,
options=scAlignOptions(steps=5000, log.every=5000, norm=TRUE, batch.norm.layer=TRUE, early.stop=FALSE, architecture="small"),
encoder.data="scale.data",
decoder.data="logcounts",
supervised='none',
run.encoder=TRUE,
run.decoder=TRUE,
log.dir=file.path(results.dir, 'models','gene_input'),
device="CPU")
library(tensorflow)
\alias{encoder_small}
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
sink()
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
for (i in seq(1, 9, 1)){print(i)}
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
View(data)
filename = paste(toString(i), '_condition.txt', sep = '')
sink(filename)
area_mean <- aov(area_mean ~ condition, data = data)
sink()
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
area_mean_condition <- aov(area_mean ~ condition, data = data)
View(data)
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
area_mean_condition
area_mean_condition <- aov(area_mean ~ condition, data = data)
View(data)
area_mean_class <- aov(area_mean ~ class, data = data)
View(area_mean_class)
summary(area_mean_class)
data = dataset[which(dataset$class== '1'), ]
View(data)
data = dataset[which(dataset$class== 1), ]
which(dataset$class== 1)
dataset$class
which(dataset$class== 'sample1')
i = 1
cond = paste('sample', toString(i))
cond
cond = paste('sample', toString(i), sep = '')
cond
data = dataset[which(dataset$class==cond), ]
data
View(data)
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
View(data)
area_mean_condition <- aov(area_mean ~ condition, data = data)
View(data)
cond
View(dataset)
cond = paste('sample', toString(1), sep = '')
cond
data = dataset[which(dataset$class==cond), ]
data
View(data)
area_mean_condition <- aov(area_mean ~ condition, data = data)
area_mean_condition
summary(area_mean_condition)
summary(area_mean_condition)
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
data = dataset[((i-1)*25+1):(i*25), ]
View(data)
cond = paste('sample', toString(1), sep = '')
data_ = dataset[which(dataset$class==cond), ]
View(data_)
area_mean_class <- aov(area_mean ~ class, data = data)
area_mean_condition <- aov(area_mean ~ condition, data = data_)
source("~/Google Drive/Project_2_Task1/Nanochromatography_cropped/Feature analysis/2_manova_class_condition/ANOVA.R")
